#!/usr/bin/env python
import numpy as np
import rospy
import tf
import threading
from CMap2D import CMap2D, gridshow
import pose2d
import matplotlib.pyplot as plt
import time
import Tkinter as tk

from nav_msgs.msg import OccupancyGrid


def filter_if_out_of_bounds(indices_list, a):
    valid_mask = np.all(
        np.logical_and(indices_list >= 0, indices_list < a.shape),
        axis=-1,
    )
    return indices_list[valid_mask]

class ManualMapMatcher(object):
    def __init__(self, map2d):
        # x axis points "forward" from the robot, y points "left"
        self.global_map = map2d  # occupancy grid
        self.kSlamMapTopic = "/slam_map"
        self.kGlobalMatchTopic = "debug/GlobalMatch"
        self.kGlobalMapFrame = rospy.get_param("/map_matcher_client/reference_map_frame", "bnb_map")
        self.kPublishLocalizationPeriod = rospy.Duration(
            rospy.get_param("/map_matcher_client/tf_republishing_frequency", 0.1))  # [s]
        # state
        self.BACKGROUND_MODE = False
        self.UPDATE_PLOT = True
        self.lock = threading.Lock()
        self.global_map_8ds = self.global_map
        self.bnb_last_tf = None
        self.slam_map_msg = None
        self.slam_map = None
        self.i_source_origin_in_reference = 0
        self.j_source_origin_in_reference = 0
        self.theta = 0

    def run(self):
        # Initialize ros
        self.tf_broadcaster = tf.TransformBroadcaster()
        # Publishers
        self.global_match_pub = rospy.Publisher(self.kGlobalMatchTopic, OccupancyGrid, queue_size=1)
        self.hr_global_match_pub = rospy.Publisher(self.kGlobalMatchTopic+"_high_res",
                                                   OccupancyGrid, queue_size=1)
        # Services
        rospy.Subscriber(self.kSlamMapTopic, OccupancyGrid, self.slam_map_callback, queue_size=1)
        rospy.Timer(self.kPublishLocalizationPeriod, self.publish_localization_callback)
        try:
            self.refresh_map_gui()
        except KeyboardInterrupt:
            print("Keyboard interrupt - Shutting down")
        rospy.signal_shutdown("Keyboard Interrupt")

    # callbacks
    def slam_map_callback(self, msg):
        self.slam_map_msg = msg
        self.slam_map = CMap2D()
        self.slam_map.from_msg(msg)
        self.UPDATE_PLOT = True

    def refresh_map_gui(self):
        # CREATE GUI ---------------------------------------------------------
        plt.ion()
        fig = plt.figure("manual map matcher")
        gridshow(self.global_map.occupancy())
        sc, = plt.plot([], [], ',r')
        ax = fig.axes[0]

        self.is_lb_pressed = False
        self.lb_press_origin = [0, 0]
        self.lb_press_init_ij = [0, 0]
        self.is_rb_pressed = False
        self.rb_press_origin = [0, 0]
        self.rb_press_init_theta = 0

        def onclick(event):
            if event.button == 1:
                if event.dblclick:
                    self.set_tf_and_publish_debug()
                with self.lock:
                    self.is_lb_pressed = True
                    self.lb_press_origin = [event.xdata, event.ydata]
                    self.lb_press_init_ij = [self.i_source_origin_in_reference,
                                             self.j_source_origin_in_reference]
            if event.button == 3:
                with self.lock:
                    self.is_rb_pressed = True
                    self.rb_press_origin = [event.xdata, event.ydata]
                    self.rb_press_init_theta = self.theta * 1.

        def onrelease(event):
            if event.button == 1:
                self.is_lb_pressed = False
            if event.button == 3:
                self.is_rb_pressed = False

        def ondrag(event):
            if event.inaxes is not ax:
                return
            if self.is_lb_pressed:
                with self.lock:
                    self.i_source_origin_in_reference = int(
                        self.lb_press_init_ij[0] + event.xdata - self.lb_press_origin[0])
                    self.j_source_origin_in_reference = int(
                        self.lb_press_init_ij[1] + event.ydata - self.lb_press_origin[1])
                    self.UPDATE_PLOT = True
            if self.is_rb_pressed:
                with self.lock:
                    self.theta = self.rb_press_init_theta + 0.5 * np.pi * (
                        event.xdata - self.rb_press_origin[0]) / self.global_map.occupancy().shape[0]
                    self.UPDATE_PLOT = True

        fig.canvas.mpl_connect('button_press_event', onclick)
        fig.canvas.mpl_connect('button_release_event', onrelease)
        fig.canvas.mpl_connect('motion_notify_event', ondrag)

        # GUI UPDATE LOOP -------------------------------------------------------
        while True:
            if rospy.is_shutdown():
                break
            if self.BACKGROUND_MODE:
                time.sleep(0.1)
                continue
            try:
                plt.pause(0.1)
            except tk.TclError as e:
                print(e)
                # close gui and switch to background mode
                rospy.loginfo("GUI closed. switching to background mode.")
                self.BACKGROUND_MODE = True
                self.set_tf_and_publish_debug()
                continue
            with self.lock:
                slam_map_msg = self.slam_map_msg
                slam_map = self.slam_map
                theta = self.theta
                pose = np.array([self.i_source_origin_in_reference, self.j_source_origin_in_reference])
            # checks
            if slam_map_msg is None:
                continue
            # update plot
            if self.UPDATE_PLOT:
                hits = slam_map.as_occupied_points_ij()
                hits = rotate_points_around_map_center(hits, theta, slam_map) + pose
                sc.set_data(hits[:, 0], hits[:, 1])
                self.UPDATE_PLOT = False
        return

    def publish_localization_callback(self, event=None):
        if self.bnb_last_tf is not None:
            tf = self.bnb_last_tf[:]
            tf[2] = rospy.Time.now()
            self.tf_broadcaster.sendTransform(*tf)

    def set_tf_and_publish_debug(self):
        self.publish_to_ros()
        self.bnb_last_tf = self.get_tf_from_current_ijtheta()

    def publish_to_ros(self):
        pose = np.array([self.i_source_origin_in_reference, self.j_source_origin_in_reference])
        hits = self.slam_map.as_occupied_points_ij()
        hits = rotate_points_around_map_center(hits, self.theta, self.slam_map) + pose
        # publish to ros
        debug_match = self.global_map.occupancy() * 1.
        valid_hits = filter_if_out_of_bounds(hits, debug_match)
        debug_match[tuple(valid_hits.T)] -= 2
        print("Published hi-res map match.")
        self.hr_global_match_pub.publish(
            numpy_to_occupancy_grid_msg(debug_match, self.global_map, self.kGlobalMapFrame))

    def get_tf_from_current_ijtheta(self):
        if True:
            slam_map_msg = self.slam_map_msg
            slam_map = self.slam_map
            theta = self.theta
            pose = np.array([self.i_source_origin_in_reference, self.j_source_origin_in_reference])
            global_map = self.global_map
        slam_map = CMap2D()
        slam_map.from_msg(slam_map_msg)
        # find Tf between slam and global map
        q = slam_map_msg.info.origin.orientation
        slam_th = tf.transformations.euler_from_quaternion(np.array([q.x, q.y, q.z, q.w]))[2]
        assert slam_th == 0
        # origin of the slam map in bnb map frame
        o_ij = rotate_points_around_map_center(
            slam_map.xy_to_ij(np.array([[0., 0.]]), clip_if_outside=False), theta, slam_map)
        o_ij += np.array(pose)
        o_th = slam_th + theta
        o_xy = global_map.ij_to_xy(o_ij)[0]
        # inverse of transform
        o_xy_inv = pose2d.inverse_pose2d(np.array([o_xy[0], o_xy[1], o_th]))
        stamp = rospy.Time.now()
        # set and publish tf based on solution.
        tf_result = [
            (o_xy_inv[0], o_xy_inv[1], 0),
            tf.transformations.quaternion_from_euler(0, 0, o_xy_inv[2]),
            stamp,
            self.kGlobalMapFrame,
            slam_map_msg.header.frame_id,
        ]
        return tf_result

# helpers
def numpy_to_occupancy_grid_msg(arr, ref_map2d, frame_id, time=None):
    if not len(arr.shape) == 2:
        raise TypeError('Array must be 2D')
    arr = arr.T * 100.
    if not arr.dtype == np.int8:
        arr = arr.astype(np.int8)
    if time is None:
        time = rospy.Time.now()
    grid = OccupancyGrid()
    grid.header.frame_id = frame_id
    grid.header.stamp.secs = time.secs
    grid.header.stamp.nsecs = time.nsecs
    grid.data = arr.ravel()
    grid.info.resolution = ref_map2d.resolution()
    grid.info.height = arr.shape[0]
    grid.info.width = arr.shape[1]
    origin = np.array(ref_map2d.origin)
    grid.info.origin.position.x = origin[0]
    grid.info.origin.position.y = origin[1]
    return grid

def rotate_points_around_map_center(points, th, map_):
    rot_mat = np.array([
        [np.cos(th), -np.sin(th)],
        [np.sin(th),  np.cos(th)], # noqa
    ])
    # rotation around center
    return (np.matmul(
            rot_mat,
            (points - (np.array(map_.occupancy().shape) * 0.5)).T
            ).T + (np.array(map_.occupancy().shape) * 0.5)).astype(int)


if __name__ == "__main__":
    rospy.init_node("manual_map_matcher")
    print("Loading reference map.")
    folder = rospy.get_param("/map_matcher_client/maps_folder", "~/maps/")
    filename = rospy.get_param("/map_matcher_client/reference_map_name", "map")
    try:
        map_ = CMap2D(folder, filename)
    except IOError as e:
        print(e)
        raise IOError("Failed to load reference map. Make sure {}.yaml and {}.pgm"
                      " are in the {} folder.".format(filename, filename, folder))
    manual_map_matcher = ManualMapMatcher(map_)
    manual_map_matcher.run()
